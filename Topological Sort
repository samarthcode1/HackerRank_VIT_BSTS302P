int[] inDegree = new int[V];
        for (int i = 0; i < V; i++) {
            for (int neighbor : adj.get(i)) {
                inDegree[neighbor]++;
            }
        }

        // Create a queue and enqueue all vertices with 0 in-degree
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }

        // Initialize the result list
        List<Integer> result = new ArrayList<>();

        // Perform topological sorting
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            result.add(cur);

            // Decrease the in-degree of all neighbors of the current vertex
            for (int neighbor : adj.get(cur)) {
                inDegree[neighbor]--;
                // If the in-degree of a neighbor becomes 0, enqueue it
                if (inDegree[neighbor] == 0) {
                    queue.offer(neighbor);
                }
            }
        }

        // If the result size is less than V, the graph contains a cycle
        if (result.size() != V) {
            // Handle the cycle case, if needed
            return new int[0];
        }

        // Convert the result list to an array and return
        int[] resultArray = new int[result.size()];
        for (int i = 0; i < result.size(); i++) {
            resultArray[i] = result.get(i);
        }
        return resultArray;
